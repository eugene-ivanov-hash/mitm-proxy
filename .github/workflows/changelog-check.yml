name: Changelog Check

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  check-changelog:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check if CHANGELOG.md was modified
        id: check-changelog
        run: |
          # Get the base branch (usually main)
          BASE_BRANCH=${{ github.base_ref }}
          
          # Check if CHANGELOG.md was modified in this PR
          git diff --name-only origin/$BASE_BRANCH...HEAD | grep -q "CHANGELOG.md"
          if [ $? -eq 0 ]; then
            echo "Changelog was updated. ✅"
            echo "updated=true" >> $GITHUB_OUTPUT
          else
            echo "updated=false" >> $GITHUB_OUTPUT
          fi

      - name: Get latest release version
        id: latest-release
        run: |
          # Get the latest release tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest release tag: $LATEST_TAG"
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          
          # Extract version numbers without the 'v' prefix
          LATEST_VERSION=${LATEST_TAG#v}
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          
          # Split version into components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "patch=$PATCH" >> $GITHUB_OUTPUT

      - name: Check for new version in changelog
        id: check-version
        if: steps.check-changelog.outputs.updated == 'true'
        run: |
          # Extract version numbers from the changelog
          NEW_VERSION=$(grep -oP '## \[\K[0-9]+\.[0-9]+\.[0-9]+(?=\])' CHANGELOG.md | head -1)
          echo "New version in changelog: $NEW_VERSION"
          
          # Check if there's an [Unreleased] section
          if grep -q '## \[Unreleased\]' CHANGELOG.md; then
            echo "Found [Unreleased] section in changelog"
            echo "has_unreleased=true" >> $GITHUB_OUTPUT
          else
            echo "No [Unreleased] section found in changelog"
            echo "has_unreleased=false" >> $GITHUB_OUTPUT
          fi
          
          if [ -z "$NEW_VERSION" ]; then
            echo "No version found in changelog"
            echo "version_ok=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Split versions into components
          IFS='.' read -r NEW_MAJOR NEW_MINOR NEW_PATCH <<< "$NEW_VERSION"
          LATEST_MAJOR=${{ steps.latest-release.outputs.major }}
          LATEST_MINOR=${{ steps.latest-release.outputs.minor }}
          LATEST_PATCH=${{ steps.latest-release.outputs.patch }}
          
          # Compare versions
          if [ "$NEW_MAJOR" -gt "$LATEST_MAJOR" ] || \
             ([ "$NEW_MAJOR" -eq "$LATEST_MAJOR" ] && [ "$NEW_MINOR" -gt "$LATEST_MINOR" ]) || \
             ([ "$NEW_MAJOR" -eq "$LATEST_MAJOR" ] && [ "$NEW_MINOR" -eq "$LATEST_MINOR" ] && [ "$NEW_PATCH" -gt "$LATEST_PATCH" ]); then
            echo "New version $NEW_VERSION is higher than latest release $LATEST_MAJOR.$LATEST_MINOR.$LATEST_PATCH ✅"
            echo "version_ok=true" >> $GITHUB_OUTPUT
          else
            echo "New version $NEW_VERSION is not higher than latest release $LATEST_MAJOR.$LATEST_MINOR.$LATEST_PATCH ❌"
            echo "version_ok=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR if changelog not updated
        if: steps.check-changelog.outputs.updated == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ **Warning:** This PR does not include an update to `CHANGELOG.md`.\n\nPlease add your changes to the `[Unreleased]` section of the changelog before merging this PR.'
            })

      - name: Comment on PR if version not incremented
        if: steps.check-changelog.outputs.updated == 'true' && steps.check-version.outputs.version_ok == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '\u26a0\ufe0f **Warning:** The CHANGELOG.md was updated, but no new version higher than the latest release (`${{ steps.latest-release.outputs.latest_tag }}`) was found.\n\nPlease add a new version section in the changelog with a version number higher than the latest release.'
            })

      - name: Comment on PR if no Unreleased section
        if: steps.check-changelog.outputs.updated == 'true' && steps.check-version.outputs.has_unreleased == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '\u2139\ufe0f **Note:** The CHANGELOG.md does not have an [Unreleased] section. This is acceptable if all changes are being released immediately, but consider adding an [Unreleased] section for tracking future changes.'
            })

      - name: Check PR status
        if: steps.check-changelog.outputs.updated == 'false' || (steps.check-changelog.outputs.updated == 'true' && steps.check-version.outputs.version_ok == 'false')
        run: |
          if [ "${{ steps.check-changelog.outputs.updated }}" == "false" ]; then
            echo "::warning::No update to CHANGELOG.md was found in this PR. Please update the changelog before merging."
          else
            echo "::warning::The CHANGELOG.md was updated, but no new version higher than the latest release was found. Please add a new version section in the changelog."
          fi
          # Uncomment the line below to make the check fail if requirements are not met
          exit 1
